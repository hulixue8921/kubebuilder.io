package main

import (
	"context"
	"fmt"
	"time"

	//corev1 "k8s.io/api/core/v1"
	//appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"

	//"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	"kubebuilder.io/apps/internal/controller"
)

func restConfig(kubeconfig *string) *rest.Config {
	config, error := clientcmd.BuildConfigFromFlags("", *kubeconfig)

	if error != nil {
		panic(error)
	}
	return config
}

func getPods(client *kubernetes.Clientset) {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
	defer cancel()

	x := controller.CreateDeployment()
	r, error := client.AppsV1().Deployments("").List(ctx, metav1.ListOptions{})

	client.AppsV1().Deployments("default").Create(context.Background(), x, metav1.CreateOptions{})

	if error != nil {
		panic(error)
	}
	for _, x := range r.Items {
		fmt.Println(x.Name)
	}
	fmt.Println(x)
}

func main() {

	kubeConfig := "../../test/main/config"
	config := restConfig(&kubeConfig)
	clientset, error := kubernetes.NewForConfig(config)

	if error != nil {
		panic(error)
	}

	getPods(clientset)
	fmt.Println("---------------")

}
